3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200   1) /* eslint-disable @typescript-eslint/no-unused-vars */
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200   2) /* eslint-disable no-console */
814e632a (TommyDron 2023-08-31 12:21:13 +0200   3) import React, { useCallback, useEffect, useMemo, useState } from 'react';
814e632a (TommyDron 2023-08-31 12:21:13 +0200   4) import { Link, NavLink } from 'react-router-dom';
814e632a (TommyDron 2023-08-31 12:21:13 +0200   5) import { useAuth } from '../../contexts/AuthProvider';
814e632a (TommyDron 2023-08-31 12:21:13 +0200   6) import { Category } from '../../types/types';
814e632a (TommyDron 2023-08-31 12:21:13 +0200   7) import ConnectModal from '../Modals/ConnectModal';
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200   8) import Hr from '../common/Hr/Hr';
814e632a (TommyDron 2023-08-31 12:21:13 +0200   9) 
814e632a (TommyDron 2023-08-31 12:21:13 +0200  10) interface HamburgerMenuProps {
814e632a (TommyDron 2023-08-31 12:21:13 +0200  11)   categoryId: number | null;
814e632a (TommyDron 2023-08-31 12:21:13 +0200  12)   setCategoryId: (id: number | null) => void;
814e632a (TommyDron 2023-08-31 12:21:13 +0200  13)   setCategoryName: (name: string | null) => void;
814e632a (TommyDron 2023-08-31 12:21:13 +0200  14) }
814e632a (TommyDron 2023-08-31 12:21:13 +0200  15) 
814e632a (TommyDron 2023-08-31 12:21:13 +0200  16) const HamburgerMenu: React.FC<HamburgerMenuProps> = ({
814e632a (TommyDron 2023-08-31 12:21:13 +0200  17)   categoryId,
814e632a (TommyDron 2023-08-31 12:21:13 +0200  18)   setCategoryId,
814e632a (TommyDron 2023-08-31 12:21:13 +0200  19)   setCategoryName,
814e632a (TommyDron 2023-08-31 12:21:13 +0200  20) }) => {
814e632a (TommyDron 2023-08-31 12:21:13 +0200  21)   const [isMenuOpen, setIsMenuOpen] = useState(false);
814e632a (TommyDron 2023-08-31 12:21:13 +0200  22)   const [categoriesData, setCategoriesData] = useState<Category[]>([]);
814e632a (TommyDron 2023-08-31 12:21:13 +0200  23)   const { isLoggedIn } = useAuth();
814e632a (TommyDron 2023-08-31 12:21:13 +0200  24) 
814e632a (TommyDron 2023-08-31 12:21:13 +0200  25)   const handleCategoryClick = (clickedCategoryId: number) => {
814e632a (TommyDron 2023-08-31 12:21:13 +0200  26)     setCategoryId(clickedCategoryId);
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  27)   };
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  28) 
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  29)   const handleCloseMenu = () => {
814e632a (TommyDron 2023-08-31 12:21:13 +0200  30)     setIsMenuOpen(false); // Ferme le menu lorsque vous sélectionnez une catégorie
814e632a (TommyDron 2023-08-31 12:21:13 +0200  31)   };
814e632a (TommyDron 2023-08-31 12:21:13 +0200  32) 
814e632a (TommyDron 2023-08-31 12:21:13 +0200  33)   const handleCategoryNameClick = (clickedCategoryName: string) => {
814e632a (TommyDron 2023-08-31 12:21:13 +0200  34)     setCategoryName(clickedCategoryName);
814e632a (TommyDron 2023-08-31 12:21:13 +0200  35)   };
814e632a (TommyDron 2023-08-31 12:21:13 +0200  36) 
814e632a (TommyDron 2023-08-31 12:21:13 +0200  37)   const toggleMenu = () => {
814e632a (TommyDron 2023-08-31 12:21:13 +0200  38)     setIsMenuOpen(!isMenuOpen);
814e632a (TommyDron 2023-08-31 12:21:13 +0200  39)   };
814e632a (TommyDron 2023-08-31 12:21:13 +0200  40) 
814e632a (TommyDron 2023-08-31 12:21:13 +0200  41)   useEffect(() => {
814e632a (TommyDron 2023-08-31 12:21:13 +0200  42)     fetch('http://localhost:5174/api/categories')
814e632a (TommyDron 2023-08-31 12:21:13 +0200  43)       .then((response) => response.json())
814e632a (TommyDron 2023-08-31 12:21:13 +0200  44)       .then((data: Category[]) => {
814e632a (TommyDron 2023-08-31 12:21:13 +0200  45)         setCategoriesData(data);
814e632a (TommyDron 2023-08-31 12:21:13 +0200  46)       })
814e632a (TommyDron 2023-08-31 12:21:13 +0200  47)       .catch((err) => console.error(err));
814e632a (TommyDron 2023-08-31 12:21:13 +0200  48)   }, []);
814e632a (TommyDron 2023-08-31 12:21:13 +0200  49) 
814e632a (TommyDron 2023-08-31 12:21:13 +0200  50)   const categoriesDataMemo = useMemo(() => categoriesData, [categoriesData]);
814e632a (TommyDron 2023-08-31 12:21:13 +0200  51) 
814e632a (TommyDron 2023-08-31 12:21:13 +0200  52)   return (
814e632a (TommyDron 2023-08-31 12:21:13 +0200  53)     <div className="xl:hidden w-1/4 h-full flex justify-center items-center">
814e632a (TommyDron 2023-08-31 12:21:13 +0200  54)       <button
814e632a (TommyDron 2023-08-31 12:21:13 +0200  55)         type="button"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  56)         onClick={toggleMenu} // Appel de la fonction pour basculer l'état du menu
814e632a (TommyDron 2023-08-31 12:21:13 +0200  57)         className="inline-flex items-center justify-center p-2 w-fit h-fit text-lg text-[#BE9063] rounded-lg hover:bg-[#A4978E] "
814e632a (TommyDron 2023-08-31 12:21:13 +0200  58)         aria-controls="navbar-hamburger"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  59)         aria-expanded={isMenuOpen} // Mettre à jour l'attribut aria-expanded
814e632a (TommyDron 2023-08-31 12:21:13 +0200  60)       >
814e632a (TommyDron 2023-08-31 12:21:13 +0200  61)         <span className="sr-only">Open main menu</span>
814e632a (TommyDron 2023-08-31 12:21:13 +0200  62)         <svg
814e632a (TommyDron 2023-08-31 12:21:13 +0200  63)           className="w-12 h-12 "
814e632a (TommyDron 2023-08-31 12:21:13 +0200  64)           aria-hidden="true"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  65)           xmlns="http://www.w3.org/2000/svg"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  66)           fill="none"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  67)           viewBox="0 0 17 14"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  68)         >
814e632a (TommyDron 2023-08-31 12:21:13 +0200  69)           <path
814e632a (TommyDron 2023-08-31 12:21:13 +0200  70)             stroke="currentColor"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  71)             strokeLinecap="round"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  72)             strokeLinejoin="round"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  73)             strokeWidth="2"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  74)             d="M1 1h15M1 7h15M1 13h15"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  75)           />
814e632a (TommyDron 2023-08-31 12:21:13 +0200  76)         </svg>
814e632a (TommyDron 2023-08-31 12:21:13 +0200  77)       </button>
814e632a (TommyDron 2023-08-31 12:21:13 +0200  78)       <div
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  79)         className={`w-[80%] z-50 absolute right-0 top-24 rounded
814e632a (TommyDron 2023-08-31 12:21:13 +0200  80)          ${isMenuOpen ? '' : 'hidden'}`}
814e632a (TommyDron 2023-08-31 12:21:13 +0200  81)         id="navbar-hamburger"
814e632a (TommyDron 2023-08-31 12:21:13 +0200  82)       >
814e632a (TommyDron 2023-08-31 12:21:13 +0200  83)         <ul className="w-3/4 flex flex-col font-medium mt-6 text-3xl rounded-lg bg-[#BE9063] text-center">
814e632a (TommyDron 2023-08-31 12:21:13 +0200  84)           <li>
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  85)             <NavLink
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  86)               to="/"
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  87)               className="block py-2 text-white rounded"
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  88)               onClick={() => {
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  89)                 handleCloseMenu();
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  90)               }}
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  91)             >
814e632a (TommyDron 2023-08-31 12:21:13 +0200  92)               Home
814e632a (TommyDron 2023-08-31 12:21:13 +0200  93)             </NavLink>
814e632a (TommyDron 2023-08-31 12:21:13 +0200  94)           </li>
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  95)           <hr className="border-2 border-white" />
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  96)           <li className="flex justify-center mb-2">
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  97)             <NavLink
3a08dca4 (TommyDron 2023-08-31 15:11:02 +0200  98)               to="/proposition-co